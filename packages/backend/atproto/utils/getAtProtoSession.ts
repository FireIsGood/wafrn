import { Model } from 'sequelize'
import { environment } from '../../environment.js'
import { AtpAgent, BskyAgent } from '@atproto/api'
import { User } from '../../models/index.js'
import { redisCache } from '../../utils/redis.js'

async function getAtProtoSession(user?: User): Promise<AtpAgent> {
  const serviceUrl = environment.bskyPds.startsWith('http') ? environment.bskyPds : 'https://' + environment.bskyPds
  const agent = new AtpAgent({
    service: serviceUrl,
    persistSession: async (evt, session) => {
      if (session && user) {
        // Updated so we do not need to log in on every interaction
        await redisCache.set('bskySession:' + user.id, JSON.stringify(session), 'EX', 3600)
      }
    }
  })
  if (user) {
    const existingSession = await redisCache.get('bskySession:' + user.id)
    let loggedIn = false
    if (existingSession) {
      loggedIn = (await agent.sessionManager.resumeSession(JSON.parse(existingSession))).success
    }

    if (!loggedIn) {
      await redisCache.del('bskySession:' + user.id)
      await agent.sessionManager.login({
        identifier: user.url + '@' + environment.instanceUrl,
        // this is cursed BUTT its an autogenerated one. And the login endpoints are blocked too. so its safe-ish.
        password: user.bskyAuthData
      })
    }
  }

  return agent
}

export { getAtProtoSession }
